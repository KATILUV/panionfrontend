/**
 * Insights Panel Component
 * Displays proactive insights generated by Manus
 */

import React, { useEffect } from 'react';
import { useInsights, Insight } from '@/hooks/useManus';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import { Badge } from '@/components/ui/badge';
import { ScrollArea } from '@/components/ui/scroll-area';
import { useToast } from '@/hooks/use-toast';
import { 
  Lightbulb, 
  AlertCircle, 
  TrendingUp, 
  HelpCircle, 
  Info, 
  BarChart2, 
  Check, 
  RefreshCw
} from 'lucide-react';

interface InsightsPanelProps {
  sessionId: string;
  maxHeight?: string;
  onInsightSelected?: (insight: Insight) => void;
  autoGenerate?: boolean;
}

export function InsightsPanel({
  sessionId,
  maxHeight = '400px',
  onInsightSelected,
  autoGenerate = true
}: InsightsPanelProps) {
  const { toast } = useToast();
  const { 
    insights, 
    isLoading, 
    error, 
    refetch, 
    generateInsights, 
    isGenerating,
    acknowledgeInsight,
    isAcknowledging
  } = useInsights(sessionId);

  // Auto-generate insights on mount if enabled
  useEffect(() => {
    if (autoGenerate && insights.length === 0 && !isLoading && !isGenerating) {
      generateInsights();
    }
  }, [autoGenerate, insights.length, isLoading, isGenerating, generateInsights]);

  // Handle errors
  useEffect(() => {
    if (error) {
      toast({
        title: "Failed to load insights",
        description: error.message,
        variant: "destructive"
      });
    }
  }, [error, toast]);

  // Get the appropriate icon for each insight type
  const getInsightIcon = (type: Insight['type']) => {
    switch (type) {
      case 'opportunity':
        return <Lightbulb className="h-5 w-5 text-yellow-500" />;
      case 'potential_error':
        return <AlertCircle className="h-5 w-5 text-red-500" />;
      case 'data_pattern':
        return <TrendingUp className="h-5 w-5 text-green-500" />;
      case 'clarification_needed':
        return <HelpCircle className="h-5 w-5 text-blue-500" />;
      case 'information':
        return <Info className="h-5 w-5 text-gray-500" />;
      case 'suggestion':
        return <BarChart2 className="h-5 w-5 text-purple-500" />;
      default:
        return <Info className="h-5 w-5" />;
    }
  };

  // Get the appropriate color for priority
  const getPriorityColor = (priority: Insight['priority']) => {
    switch (priority) {
      case 'urgent':
        return 'bg-red-500 hover:bg-red-600';
      case 'high':
        return 'bg-orange-500 hover:bg-orange-600';
      case 'medium':
        return 'bg-yellow-500 hover:bg-yellow-600';
      case 'low':
        return 'bg-blue-500 hover:bg-blue-600';
      default:
        return 'bg-gray-500 hover:bg-gray-600';
    }
  };

  // Handle acknowledging an insight
  const handleAcknowledge = (insight: Insight, e: React.MouseEvent) => {
    e.stopPropagation();
    acknowledgeInsight(insight.id);
    
    toast({
      title: "Insight acknowledged",
      description: "The insight has been marked as seen."
    });
  };

  // Handle selecting an insight
  const handleSelectInsight = (insight: Insight) => {
    if (onInsightSelected) {
      onInsightSelected(insight);
    }
  };

  // Refresh insights
  const handleRefresh = () => {
    generateInsights();
    toast({
      title: "Generating new insights",
      description: "Analyzing your conversation for new insights..."
    });
  };

  return (
    <Card className="w-full h-full overflow-hidden">
      <CardHeader className="pb-3">
        <CardTitle className="flex justify-between items-center">
          <div className="flex items-center">
            <Lightbulb className="h-5 w-5 mr-2 text-yellow-500" />
            <span>Proactive Insights</span>
          </div>
          <Button 
            size="sm" 
            variant="outline" 
            onClick={handleRefresh}
            disabled={isGenerating}
          >
            <RefreshCw className={`h-4 w-4 mr-1 ${isGenerating ? 'animate-spin' : ''}`} />
            {isGenerating ? 'Generating...' : 'Refresh'}
          </Button>
        </CardTitle>
        <CardDescription>
          Manus-generated insights based on your conversation
        </CardDescription>
      </CardHeader>
      <ScrollArea className="p-0" style={{ maxHeight }}>
        <CardContent>
          {isLoading ? (
            <div className="flex justify-center items-center py-8">
              <RefreshCw className="h-8 w-8 animate-spin text-gray-400" />
            </div>
          ) : insights.length === 0 ? (
            <Alert className="bg-muted">
              <AlertTitle>No insights yet</AlertTitle>
              <AlertDescription>
                As you continue your conversation, Manus will generate insights proactively.
              </AlertDescription>
            </Alert>
          ) : (
            <div className="space-y-3">
              {insights.map((insight) => (
                <Card 
                  key={insight.id} 
                  className="cursor-pointer hover:border-primary transition-colors duration-200"
                  onClick={() => handleSelectInsight(insight)}
                >
                  <CardHeader className="p-3 pb-0 flex flex-row items-start justify-between space-y-0">
                    <div className="flex items-center space-x-2">
                      {getInsightIcon(insight.type)}
                      <CardTitle className="text-base">{insight.title}</CardTitle>
                    </div>
                    <Badge className={`${getPriorityColor(insight.priority)} text-white`}>
                      {insight.priority}
                    </Badge>
                  </CardHeader>
                  <CardContent className="p-3 pt-2">
                    <p className="text-sm text-muted-foreground">{insight.description}</p>
                    {insight.suggestedAction && (
                      <p className="text-sm font-medium mt-2">
                        Suggested action: {insight.suggestedAction}
                      </p>
                    )}
                  </CardContent>
                  <CardFooter className="p-3 pt-0 flex justify-between items-center text-xs text-muted-foreground">
                    <span>Confidence: {Math.round(insight.confidence * 100)}%</span>
                    <Button 
                      size="sm" 
                      variant="ghost" 
                      onClick={(e) => handleAcknowledge(insight, e)}
                      disabled={isAcknowledging}
                    >
                      <Check className="h-4 w-4 mr-1" /> Acknowledge
                    </Button>
                  </CardFooter>
                </Card>
              ))}
            </div>
          )}
        </CardContent>
      </ScrollArea>
    </Card>
  );
}

export default InsightsPanel;