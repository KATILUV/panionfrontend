/**
 * Insights Panel Component
 * Displays proactive insights generated by Manus intelligence
 */

import React, { useState, useEffect } from 'react';
import { useInsights, type Insight } from '@/hooks/useManus';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from '@/components/ui/card';
import { Skeleton } from '@/components/ui/skeleton';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Badge } from '@/components/ui/badge';
import { 
  Lightbulb, 
  RefreshCw, 
  AlertTriangle, 
  Info, 
  TrendingUp, 
  Bell,
  Star
} from 'lucide-react';

interface InsightsPanelProps {
  sessionId: string;
  maxHeight?: string;
  onInsightSelected?: (insight: Insight) => void;
}

export function InsightsPanel({
  sessionId,
  maxHeight = '500px',
  onInsightSelected
}: InsightsPanelProps) {
  const { 
    insights, 
    isLoading, 
    error, 
    generateInsights, 
    isGenerating 
  } = useInsights(sessionId);
  
  const [hasNewInsights, setHasNewInsights] = useState(false);
  const [sortedInsights, setSortedInsights] = useState<Insight[]>([]);
  const [viewedInsights, setViewedInsights] = useState<Record<string, boolean>>({});
  
  // Sort insights by importance and highlight unviewed ones
  useEffect(() => {
    if (insights && insights.length > 0) {
      // Check for new insights
      const hasNew = insights.some((insight: Insight) => !viewedInsights[insight.id]);
      setHasNewInsights(hasNew);
      
      // Sort by importance (descending) and then by timestamp (descending)
      const sorted = [...insights].sort((a: Insight, b: Insight) => {
        if (a.importance !== b.importance) {
          return b.importance - a.importance;
        }
        return b.timestamp - a.timestamp;
      });
      
      setSortedInsights(sorted);
    } else {
      setSortedInsights([]);
      setHasNewInsights(false);
    }
  }, [insights, viewedInsights]);
  
  // Mark an insight as viewed
  const markAsViewed = (insightId: string) => {
    setViewedInsights(prev => ({
      ...prev,
      [insightId]: true
    }));
  };
  
  // Handle insight click
  const handleInsightClick = (insight: Insight) => {
    markAsViewed(insight.id);
    if (onInsightSelected) {
      onInsightSelected(insight);
    }
  };
  
  // Get icon based on category
  const getCategoryIcon = (category: string) => {
    switch (category.toLowerCase()) {
      case 'observation':
        return <Info className="h-4 w-4 text-blue-500" />;
      case 'suggestion':
        return <Lightbulb className="h-4 w-4 text-amber-500" />;
      case 'warning':
        return <AlertTriangle className="h-4 w-4 text-red-500" />;
      case 'opportunity':
        return <TrendingUp className="h-4 w-4 text-green-500" />;
      default:
        return <Info className="h-4 w-4 text-blue-500" />;
    }
  };
  
  // Get importance stars
  const getImportanceStars = (importance: number) => {
    const normalizedImportance = Math.min(5, Math.ceil(importance / 2));
    return (
      <div className="flex items-center">
        {Array.from({ length: normalizedImportance }).map((_, i) => (
          <Star key={i} className="h-3 w-3 fill-amber-400 text-amber-400" />
        ))}
        {Array.from({ length: 5 - normalizedImportance }).map((_, i) => (
          <Star key={i} className="h-3 w-3 text-muted-foreground/30" />
        ))}
      </div>
    );
  };
  
  return (
    <Card className="w-full h-full overflow-hidden">
      <CardHeader className="pb-3">
        <CardTitle className="flex items-center">
          <Lightbulb className="h-5 w-5 mr-2 text-amber-500" />
          <span>Proactive Insights</span>
          {hasNewInsights && (
            <Badge variant="destructive" className="ml-2 h-5 min-w-5 px-1">
              <Bell className="h-3 w-3" />
            </Badge>
          )}
        </CardTitle>
        <CardDescription>
          AI-generated insights based on context and patterns
        </CardDescription>
      </CardHeader>
      
      <CardContent className="px-3">
        {isLoading ? (
          <div className="space-y-4">
            <Skeleton className="h-20 w-full" />
            <Skeleton className="h-20 w-full" />
            <Skeleton className="h-20 w-full" />
          </div>
        ) : error ? (
          <div className="p-4 text-center text-red-500">
            <AlertTriangle className="h-8 w-8 mx-auto mb-2" />
            <p>Failed to load insights</p>
            <Button 
              variant="outline"
              className="mt-2"
              onClick={() => generateInsights()}
            >
              Try Again
            </Button>
          </div>
        ) : sortedInsights.length === 0 ? (
          <div className="p-4 text-center text-muted-foreground">
            <Lightbulb className="h-8 w-8 mx-auto mb-2 text-muted-foreground/50" />
            <p>No insights available yet</p>
            <Button 
              variant="outline"
              className="mt-2"
              onClick={() => generateInsights()}
              disabled={isGenerating}
            >
              {isGenerating ? (
                <>
                  <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
                  Generating...
                </>
              ) : (
                <>
                  <Lightbulb className="h-4 w-4 mr-2" />
                  Generate Insights
                </>
              )}
            </Button>
          </div>
        ) : (
          <ScrollArea style={{ maxHeight }}>
            <div className="space-y-3 pr-3">
              {sortedInsights.map((insight: Insight) => (
                <Card 
                  key={insight.id} 
                  className={`overflow-hidden transition-all hover:shadow-md cursor-pointer ${!viewedInsights[insight.id] ? 'ring-1 ring-amber-400' : ''}`}
                  onClick={() => handleInsightClick(insight)}
                >
                  <CardContent className="p-3">
                    <div className="flex items-start gap-2">
                      <div className="mt-1">
                        {getCategoryIcon(insight.category)}
                      </div>
                      <div className="flex-1">
                        <div className="flex justify-between items-start">
                          <h4 className="font-medium">{insight.title}</h4>
                          <Badge variant="outline" className="ml-2 text-xs capitalize">
                            {insight.category}
                          </Badge>
                        </div>
                        <p className="text-sm text-muted-foreground mt-1">
                          {insight.description}
                        </p>
                        <div className="flex justify-between items-center mt-2 text-xs text-muted-foreground">
                          <span>Importance: {insight.importance}/10</span>
                          {getImportanceStars(insight.importance)}
                        </div>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </ScrollArea>
        )}
      </CardContent>
      
      <CardFooter className="pt-0">
        {sortedInsights.length > 0 && (
          <Button 
            variant="outline" 
            size="sm"
            className="w-full" 
            onClick={() => generateInsights()}
            disabled={isGenerating}
          >
            {isGenerating ? (
              <>
                <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
                Generating...
              </>
            ) : (
              <>
                <RefreshCw className="h-4 w-4 mr-2" />
                Generate New Insights
              </>
            )}
          </Button>
        )}
      </CardFooter>
    </Card>
  );
}

export default InsightsPanel;