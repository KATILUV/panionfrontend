/**
 * Insights Panel Component
 * Displays proactive insights generated by Manus intelligence
 */

import React, { useState, useEffect } from 'react';
import { useInsights, type Insight } from '@/hooks/useManus';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { 
  Lightbulb, 
  AlertTriangle, 
  CheckCircle2,
  Eye, 
  EyeOff, 
  RefreshCw, 
  Filter,
  ArrowUpDown,
  ClipboardList
} from 'lucide-react';

interface InsightsPanelProps {
  sessionId: string;
  maxHeight?: string;
  onInsightSelected?: (insight: Insight) => void;
}

export function InsightsPanel({
  sessionId,
  maxHeight = '600px',
  onInsightSelected
}: InsightsPanelProps) {
  const [activeFilter, setActiveFilter] = useState<string>('all');
  const [viewedInsights, setViewedInsights] = useState<Record<string, boolean>>({});
  
  const {
    insights,
    isLoading,
    error,
    generateInsights,
    fetchInsights
  } = useInsights(sessionId);
  
  useEffect(() => {
    if (sessionId) {
      fetchInsights();
    }
  }, [sessionId, fetchInsights]);
  
  const markAsViewed = (id: string) => {
    setViewedInsights(prev => ({ ...prev, [id]: true }));
  };
  
  const hasNewInsights = () => {
    if (!insights || insights.length === 0) return false;
    const hasNew = insights.some((insight: Insight) => !viewedInsights[insight.id]);
    return hasNew;
  };
  
  const getFilteredInsights = () => {
    if (!insights) return [];
    
    if (activeFilter === 'all') return insights;
    
    if (activeFilter === 'unread') {
      return insights.filter((insight: Insight) => !viewedInsights[insight.id]);
    }
    
    // Filter by category
    return insights.filter((insight: Insight) => insight.category === activeFilter);
  };
  
  const getCategoryBadge = (category: string) => {
    switch (category) {
      case 'warning':
        return (
          <Badge variant="secondary" className="bg-red-100 text-red-800 hover:bg-red-100">
            <AlertTriangle className="h-3 w-3 mr-1" />
            Warning
          </Badge>
        );
      case 'suggestion':
        return (
          <Badge variant="secondary" className="bg-green-100 text-green-800 hover:bg-green-100">
            <Lightbulb className="h-3 w-3 mr-1" />
            Suggestion
          </Badge>
        );
      case 'opportunity':
        return (
          <Badge variant="secondary" className="bg-blue-100 text-blue-800 hover:bg-blue-100">
            <ArrowUpDown className="h-3 w-3 mr-1" />
            Opportunity
          </Badge>
        );
      default:
        return (
          <Badge variant="outline">
            {category.charAt(0).toUpperCase() + category.slice(1)}
          </Badge>
        );
    }
  };
  
  const getImportanceBadge = (importance: number) => {
    if (importance >= 8) {
      return (
        <Badge variant="secondary" className="bg-red-100 text-red-800">
          High
        </Badge>
      );
    } else if (importance >= 5) {
      return (
        <Badge variant="secondary" className="bg-amber-100 text-amber-800">
          Medium
        </Badge>
      );
    } else {
      return (
        <Badge variant="secondary" className="bg-blue-100 text-blue-800">
          Low
        </Badge>
      );
    }
  };
  
  const sortedInsights = getFilteredInsights().sort((a: Insight, b: Insight) => {
    // First by viewed status (unviewed first)
    const aViewed = !!viewedInsights[a.id];
    const bViewed = !!viewedInsights[b.id];
    
    if (!aViewed && bViewed) return -1;
    if (aViewed && !bViewed) return 1;
    
    // Then by importance (high to low)
    return b.importance - a.importance;
  });
  
  const handleInsightClick = (insight: Insight) => {
    markAsViewed(insight.id);
    if (onInsightSelected) {
      onInsightSelected(insight);
    }
  };
  
  return (
    <Card className="w-full h-full overflow-hidden">
      <CardHeader>
        <CardTitle className="flex items-center justify-between">
          <div className="flex items-center">
            <Lightbulb className="h-5 w-5 mr-2 text-amber-500" />
            <span>Insights</span>
          </div>
          {hasNewInsights() && (
            <Badge className="bg-red-500">New</Badge>
          )}
        </CardTitle>
        <CardDescription className="flex justify-between">
          <span>Proactive insights about your tasks and data</span>
          <Button
            variant="ghost"
            size="sm"
            className="h-7 px-2"
            onClick={() => generateInsights()}
            disabled={isLoading}
          >
            {isLoading ? (
              <RefreshCw className="h-4 w-4 animate-spin" />
            ) : (
              <RefreshCw className="h-4 w-4" />
            )}
          </Button>
        </CardDescription>
      </CardHeader>
      
      <CardContent className="px-4 pb-4">
        <Tabs defaultValue="all" className="w-full" onValueChange={setActiveFilter}>
          <TabsList className="w-full grid grid-cols-4 mb-4">
            <TabsTrigger value="all" className="text-xs">
              All
            </TabsTrigger>
            <TabsTrigger value="unread" className="text-xs">
              Unread {hasNewInsights() && <span className="ml-1 text-red-500">â€¢</span>}
            </TabsTrigger>
            <TabsTrigger value="suggestion" className="text-xs">
              Suggestions
            </TabsTrigger>
            <TabsTrigger value="warning" className="text-xs">
              Warnings
            </TabsTrigger>
          </TabsList>
        </Tabs>
        
        {isLoading ? (
          <div className="py-8 flex items-center justify-center text-muted-foreground">
            <RefreshCw className="h-5 w-5 mr-2 animate-spin" />
            <span>Loading insights...</span>
          </div>
        ) : error ? (
          <div className="py-8 text-center text-red-500">
            <AlertTriangle className="h-8 w-8 mx-auto mb-2" />
            <p>Failed to load insights</p>
            <Button 
              variant="outline"
              className="mt-2"
              onClick={() => fetchInsights()}
            >
              Try Again
            </Button>
          </div>
        ) : sortedInsights.length === 0 ? (
          <div className="py-8 text-center text-muted-foreground">
            <ClipboardList className="h-8 w-8 mx-auto mb-2 text-muted-foreground/50" />
            <p>No insights available</p>
            {activeFilter !== 'all' && (
              <p className="text-sm mt-1">Try changing the filter or generating new insights</p>
            )}
            <Button 
              variant="outline"
              className="mt-4"
              onClick={() => generateInsights()}
            >
              Generate Insights
            </Button>
          </div>
        ) : (
          <ScrollArea style={{ maxHeight }}>
            <div className="space-y-3">
              {sortedInsights.map((insight: Insight) => (
                <Card 
                  key={insight.id} 
                  className={`cursor-pointer hover:shadow-md transition-shadow ${
                    !viewedInsights[insight.id] ? 'border-blue-300 bg-blue-50/30' : ''
                  }`}
                  onClick={() => handleInsightClick(insight)}
                >
                  <CardContent className="p-3">
                    <div className="flex items-start justify-between">
                      <div className="flex-1">
                        <div className="flex items-center">
                          <h3 className="font-medium">
                            {insight.title}
                          </h3>
                          {!viewedInsights[insight.id] ? (
                            <Badge className="ml-2 bg-blue-500">New</Badge>
                          ) : null}
                        </div>
                        <p className="text-sm text-muted-foreground mt-1">
                          {insight.description}
                        </p>
                      </div>
                      <div className="ml-2 flex-shrink-0">
                        {!viewedInsights[insight.id] ? (
                          <EyeOff className="h-4 w-4 text-muted-foreground" />
                        ) : (
                          <Eye className="h-4 w-4 text-muted-foreground" />
                        )}
                      </div>
                    </div>
                    
                    <div className="flex justify-between mt-3">
                      <div className="flex gap-2">
                        {getCategoryBadge(insight.category)}
                        <Badge variant="outline" className="text-xs">
                          {insight.source}
                        </Badge>
                      </div>
                      <div>
                        {getImportanceBadge(insight.importance)}
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </ScrollArea>
        )}
      </CardContent>
    </Card>
  );
}

export default InsightsPanel;